[package]
name = "mcp-binance-server"
version = "0.1.0"
edition = "2021"
rust-version = "1.75"
authors = ["Tradeforge Team"]
license = "MIT"
description = "MCP server for Binance API integration"
repository = "https://github.com/tradeforge/mcp-binance-rs"
keywords = ["mcp", "binance", "trading", "api", "server"]
categories = ["api-bindings", "command-line-utilities"]

[[bin]]
name = "mcp-binance-server"
path = "src/main.rs"

[lib]
name = "mcp_binance_server"
path = "src/lib.rs"

[dependencies]
# MCP Server SDK - Official Rust implementation
# Provides ServerHandler trait, tool macros, stdio transport, SSE server
rmcp = { version = "0.8.1", features = ["server", "macros", "transport-io", "transport-sse-server"] }

# Async runtime - Required by rmcp, industry standard
tokio = { version = "1.48", features = ["full"] }
tokio-util = "0.7"
tokio-stream = "0.1"

# HTTP client - For Binance API calls
# Features: json (auto serialize/deserialize), rustls-tls (TLS support)
reqwest = { version = "0.12.24", features = ["json", "rustls-tls"] }

# Serialization - Required for JSON handling
serde = { version = "1.0.228", features = ["derive"] }
serde_json = "1.0.145"

# JSON Schema generation - Auto-generates schemas for tool parameters
# Used by rmcp macros for MCP protocol compliance
schemars = { version = "1.0.4", features = ["chrono04"] }

# Error handling - Ergonomic error types with context
thiserror = "2.0.17"
anyhow = "1.0"

# Logging - Structured logging for debugging
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["env-filter"] }

# Cryptography - For token hashing and request signing
sha2 = "0.10"
hmac = "0.12"
hex = "0.4"
chrono = { version = "0.4", features = ["serde"] }

# Validation - Format validation for API credentials
regex = "1.11"
once_cell = "1.20"

# HTTP Server - axum web framework (optional feature)
axum = { version = "0.8.6", optional = true, features = ["ws", "macros"] }

# WebSocket Client - tokio-tungstenite for Binance streams (optional feature)
tokio-tungstenite = { version = "0.28.0", optional = true, features = ["rustls-tls-webpki-roots"] }
futures-util = { version = "0.3", optional = true }

# Middleware - tower ecosystem for rate limiting, CORS, tracing
tower = { version = "0.5.2", optional = true, features = ["limit", "buffer"] }
tower-http = { version = "0.6.6", optional = true, features = ["trace", "cors", "catch-panic"] }
governor = { version = "0.6", optional = true }

# Order book depth tools - WebSocket + decimal precision + rate limiting
# rust_decimal for financial precision (96-bit mantissa)
rust_decimal = { version = "1.37.2", optional = true, features = ["serde", "serde-with-arbitrary-precision"] }

# Advanced analytics dependencies (orderbook_analytics feature)
# RocksDB for time-series snapshot storage (<1ms queries, Zstd compression)
rocksdb = { version = "0.23.0", optional = true }
# Statistical analysis (median, percentiles, std dev, rolling windows)
statrs = { version = "0.18.0", optional = true }
# MessagePack serialization for compact snapshot storage
rmp-serde = { version = "1.3.0", optional = true }
# UUID v4 for anomaly/event IDs
uuid = { version = "1.11", features = ["v4", "serde"], optional = true }

# Shuttle deployment platform - Optional for cloud deployment
shuttle-runtime = { version = "0.56.0", optional = true }
shuttle-axum = { version = "0.56.0", optional = true }

[features]
default = []
http-api = ["axum", "tower", "tower-http", "governor"]
websocket = ["tokio-tungstenite", "futures-util"]
orderbook = ["tokio-tungstenite", "futures-util", "rust_decimal", "governor"]
orderbook_analytics = ["orderbook", "rocksdb", "statrs", "rmp-serde", "uuid"]
# SSE transport for cloud deployment (T003, T032)
# Base SSE without Shuttle (for local testing): cargo run --features sse
# With Shuttle runtime (for deployment): shuttle deploy (automatically includes shuttle-runtime)
sse = ["http-api", "uuid", "futures-util"]
shuttle-runtime = ["sse", "dep:shuttle-runtime", "dep:shuttle-axum"]
# Shuttle.dev automatically enables this feature and disables default features
# This builds only SSE transport without heavy orderbook_analytics dependencies (RocksDB)
shuttle = ["shuttle-runtime"]

[profile.release]
lto = true
codegen-units = 1
strip = true
opt-level = 3

[[test]]
name = "integration"
path = "tests/integration/mod.rs"

[[bench]]
name = "performance"
path = "benches/performance.rs"
harness = false

[profile.dev]
opt-level = 0
debug = true

[dev-dependencies]
# Test framework dependencies
wiremock = "0.6"
rstest = "0.26"
serial_test = "3.2"
dotenv = "0.15"

# WebSocket testing dependencies
tokio-tungstenite = { version = "0.28.0", features = ["rustls-tls-webpki-roots"] }
futures-util = "0.3"

# Orderbook analytics test dependencies
tempfile = "3.14"
rust_decimal_macros = "1.37"

# SSE transport test dependencies
uuid = { version = "1.11", features = ["v4"] }

[profile.test]
opt-level = 1
